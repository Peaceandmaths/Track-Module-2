# -*- coding: utf-8 -*-
"""Fashion MNIST_NAS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15mEdURZ4CO5YKFq9OKojkVQ5nNZnLqTu
"""

# Let's build a CNN to help our customer automate categorization of images
# of clothes. Use Fashion MNIST 10 classes
# Convolution + pooling = learning features from images and summarize the info
# Then flatten into an array of numbers then feed into a hidden layer for classification

from tensorflow import keras
from keras.layers import Conv2D, MaxPool2D, Flatten, Dense
from keras.datasets import fashion_mnist
from keras.models import Sequential
import numpy as np
from keras.utils import np_utils
import nni 
from keras.callbacks import Callback
#from NAS_main import *

# Loading and preparing data
num_classes = 10
def load_data():
  (x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()
  x_train = x_train.astype('float32')/255.0
  x_test = x_test.astype('float32')/255.0

  x_train = np.expand_dims(x_train, -1)
  x_test = np.expand_dims(x_test, -1)

  y_train = np_utils.to_categorical(y_train, num_classes)
  y_test = np_utils.to_categorical(y_test, num_classes)

  return (x_train, y_train), (x_test,y_test)

from keras.layers.pooling.max_pooling2d import MaxPooling2D

# Building model

def build_model(params):
  model = Sequential([
      Conv2D(params['filter_size_c1'],params['kernel_size_c1'],activation = 'relu'),
      Conv2D(params['filter_size_c2'],params['kernel_size_c2'], activation = 'relu'),
      MaxPooling2D(),
      Flatten(),
      Dense(params['nb_units'], activation = 'relu'),
      Dense(num_classes, activation = 'softmax')])
  
  optimizer = keras.optimizers.Adam(learning_rate= params['learning_rate'])
  model.compile(optimizer= optimizer, loss = 'categorical_crossentropy', metrics = ['accuracy'])
  return model

# report intermediate results 
class SendMetrics(Callback): 
    def on_epoch_end(self, epoch, logs= {}):
        nni.report_intermediate_result(logs['val_accuracy'])


def run(params):
    (x_train, y_train), (x_test,y_test) = load_data()
    model = build_model(params)
    model.fit(x_train, y_train, batch_size = 200, epochs = 10, validation_data = (x_test, y_test), callbacks = [SendMetrics()])
    loss, acc = model.evaluate(x_test, y_test)
    nni.report_final_result(acc)
    print(acc)


if __name__ == '__main__':
   try:
# get parameters from nni
    params = nni.get_next_parameters() # will choose parameters from search space 
    run(params)
   except Exception:
      raise





   